{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayden\\\\OneDrive\\\\Desktop\\\\personal\\\\DPR\\\\Stack\\\\dynamic-range-solver\\\\dynamic-range-solver\\\\src\\\\RecentChartsDiv.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from \"react\";\nimport RecentChart from \"./RecentChart\";\nimport { AuthContext } from \"./auth/AuthContext\";\nimport QueryFunction from \"./firestore/QueryFunction\";\nimport { FrameContext } from \"./FrameContext\";\n\n// Define a loader component (you can use any loader component you prefer)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Loader() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loader\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 10\n  }, this);\n}\n_c = Loader;\nexport function RecentChartsDiv(_ref) {\n  _s();\n  let {\n    dispatch\n  } = _ref;\n  const {\n    user\n  } = useContext(AuthContext);\n  const {\n    chartDisplay,\n    setChartDisplay\n  } = useContext(FrameContext);\n  const [formattedDataArray, setFormattedDataArray] = useState([]); // Initialize as an empty array\n  const [loading, setLoading] = useState(true); // Track whether data is loading\n\n  const data = QueryFunction();\n  let groupName;\n  useEffect(function () {\n    data.then(result => {\n      // Create a new array to store the formatted data\n      const tempFormattedDataArray = [];\n\n      // Loop through each item in the result array\n      for (const item of result) {\n        // Extract the ID from the data object\n        const id = item.id;\n\n        // Access the nestedArrayObject\n        const nestedArrayObject = item.data.nestedArrayObject;\n        const timestamped = item.data.timestamp;\n\n        // Convert the nestedArrayObject into an array of rows\n        const rowsArray = [];\n        for (let i = 1; i <= 13; i++) {\n          const rowKey = \"row\" + i;\n          const row = nestedArrayObject[rowKey];\n          rowsArray.push(row);\n        }\n        const timestampedtwo = timestamped === null || timestamped === void 0 ? void 0 : timestamped.toDate().toLocaleString(\"en-US\", {\n          month: \"short\",\n          day: \"numeric\",\n          hour: \"numeric\",\n          minute: \"numeric\"\n        });\n        // Create an object with the ID as the key and the array of rows as the value\n        const formattedItem = {\n          timestamp: timestampedtwo,\n          id: id,\n          data: rowsArray\n        };\n\n        // Push the formatted item into the array\n        tempFormattedDataArray.push(formattedItem);\n      }\n\n      // Update the state with the formatted data and mark loading as false\n      setFormattedDataArray(tempFormattedDataArray);\n      setLoading(false);\n    });\n  }, [data]);\n\n  // Function to update chartDisplay safely\n  // const updateChartDisplay = () => {\n  //   setChartDisplay((prevDisplay) => (prevDisplay === 6 ? 1 : prevDisplay + 1));\n  // };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overlap-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlap\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overlap-group-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overlap-group\",\n          children: [user ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-wrapper-2\",\n            children: \"Recent charts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-wrapper-2\",\n            children: [\"Please Log In to \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 34\n            }, this), \" View Recent Charts\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), loading ?\n          /*#__PURE__*/\n          // Render the loader while data is loading\n          _jsxDEV(Loader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this) : user ?\n          /*#__PURE__*/\n          // Render the charts when data is available and user is logged in\n          _jsxDEV(_Fragment, {\n            children: formattedDataArray.map((data, index) => /*#__PURE__*/_jsxDEV(RecentChart, {\n              index: index,\n              data: data,\n              dispatch: dispatch\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this))\n          }, void 0, false) :\n          /*#__PURE__*/\n          // Render a message if the user is not logged in\n          _jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(RecentChartsDiv, \"ncRCVjhk4J7zFmPz3nrucoVMBKE=\");\n_c2 = RecentChartsDiv;\nvar _c, _c2;\n$RefreshReg$(_c, \"Loader\");\n$RefreshReg$(_c2, \"RecentChartsDiv\");","map":{"version":3,"names":["React","useContext","useEffect","useState","RecentChart","AuthContext","QueryFunction","FrameContext","jsxDEV","_jsxDEV","Fragment","_Fragment","Loader","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","RecentChartsDiv","_ref","_s","dispatch","user","chartDisplay","setChartDisplay","formattedDataArray","setFormattedDataArray","loading","setLoading","data","groupName","then","result","tempFormattedDataArray","item","id","nestedArrayObject","timestamped","timestamp","rowsArray","i","rowKey","row","push","timestampedtwo","toDate","toLocaleString","month","day","hour","minute","formattedItem","map","index","_c2","$RefreshReg$"],"sources":["C:/Users/ayden/OneDrive/Desktop/personal/DPR/Stack/dynamic-range-solver/dynamic-range-solver/src/RecentChartsDiv.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport RecentChart from \"./RecentChart\";\r\nimport { AuthContext } from \"./auth/AuthContext\";\r\nimport QueryFunction from \"./firestore/QueryFunction\";\r\nimport { FrameContext } from \"./FrameContext\";\r\n\r\n// Define a loader component (you can use any loader component you prefer)\r\nfunction Loader() {\r\n  return <div className=\"loader\">Loading...</div>;\r\n}\r\n\r\nexport function RecentChartsDiv({ dispatch }) {\r\n  const { user } = useContext(AuthContext);\r\n  const { chartDisplay, setChartDisplay } = useContext(FrameContext);\r\n\r\n  const [formattedDataArray, setFormattedDataArray] = useState([]); // Initialize as an empty array\r\n  const [loading, setLoading] = useState(true); // Track whether data is loading\r\n\r\n  const data = QueryFunction();\r\n  let groupName;\r\n\r\n  useEffect(\r\n    function () {\r\n      data.then((result) => {\r\n        // Create a new array to store the formatted data\r\n        const tempFormattedDataArray = [];\r\n\r\n        // Loop through each item in the result array\r\n        for (const item of result) {\r\n          // Extract the ID from the data object\r\n          const id = item.id;\r\n\r\n          // Access the nestedArrayObject\r\n          const nestedArrayObject = item.data.nestedArrayObject;\r\n          const timestamped = item.data.timestamp;\r\n\r\n          // Convert the nestedArrayObject into an array of rows\r\n          const rowsArray = [];\r\n          for (let i = 1; i <= 13; i++) {\r\n            const rowKey = \"row\" + i;\r\n            const row = nestedArrayObject[rowKey];\r\n            rowsArray.push(row);\r\n          }\r\n          const timestampedtwo = timestamped?.toDate().toLocaleString(\"en-US\", {\r\n            month: \"short\",\r\n            day: \"numeric\",\r\n            hour: \"numeric\",\r\n            minute: \"numeric\",\r\n          });\r\n          // Create an object with the ID as the key and the array of rows as the value\r\n          const formattedItem = {\r\n            timestamp: timestampedtwo,\r\n            id: id,\r\n            data: rowsArray,\r\n          };\r\n\r\n          // Push the formatted item into the array\r\n          tempFormattedDataArray.push(formattedItem);\r\n        }\r\n\r\n        // Update the state with the formatted data and mark loading as false\r\n        setFormattedDataArray(tempFormattedDataArray);\r\n        setLoading(false);\r\n      });\r\n    },\r\n    [data]\r\n  );\r\n\r\n  // Function to update chartDisplay safely\r\n  // const updateChartDisplay = () => {\r\n  //   setChartDisplay((prevDisplay) => (prevDisplay === 6 ? 1 : prevDisplay + 1));\r\n  // };\r\n  return (\r\n    <div className=\"overlap-wrapper\">\r\n      <div className=\"overlap\">\r\n        <div className=\"overlap-group-wrapper\">\r\n          <div className=\"overlap-group\">\r\n            {user ? (\r\n              <div className=\"text-wrapper-2\">Recent charts</div>\r\n            ) : (\r\n              <div className=\"text-wrapper-2\">\r\n                Please Log In to <br></br> View Recent Charts\r\n              </div>\r\n            )}\r\n\r\n            {loading ? (\r\n              // Render the loader while data is loading\r\n              <Loader />\r\n            ) : user ? (\r\n              // Render the charts when data is available and user is logged in\r\n              <>\r\n                {formattedDataArray.map((data, index) => (\r\n                  <RecentChart\r\n                    key={index}\r\n                    index={index}\r\n                    data={data}\r\n                    dispatch={dispatch}\r\n                  />\r\n                ))}\r\n              </>\r\n            ) : (\r\n              // Render a message if the user is not logged in\r\n              <></>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}